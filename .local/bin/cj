#!/bin/bash
set -euo pipefail # エラーや未定義の変数が呼び出された場合プロセスを終了する


###################################
# CST to JST
###################################
# CST（日本標準時）と JST（米国中部標準時）を計算するシェルスクリプトコマンド

# 参考文献
# - [date コマンド | コマンドの使い方(Linux) | hydroculのメモ](https://hydrocul.github.io/wiki/commands/date.html)
# - [日付を取得する | UNIX & Linux コマンド・シェルスクリプト リファレンス](https://shellscript.sunone.me/date.html)


###################################
# 関数定義
###################################
# ヘルプを表示して正常終了する関数
function print_help() {
    cat << help_msg
----------------------------------------------------------------
                           CST to JST
----------------------------------------------------------------
CST（米国中部標準時）と JST（日本標準時）を計算して出力します。
時差は一律 15 時間として計算します。サマータイムは考慮しません。

  引数なし   : 現在の CST と JST を出力します。
  -c         : 指定日時を CST とした場合の JST を出力します。
  -j         : 指定日時を JST とした場合の CST を出力します。
  -h, --help : コマンド一覧を出力します。

  使用例
----------
オプションなしの実行で現在の CST と JST を出力します。
  $ cj

オプション + 日時指定 で計算を行えます。日時は ' ' で囲んでください。
  $ cj -c '2022-03-15 12:00:00'
  $ cj -j '2022-03-15 12:00:00'

date コマンドが対応している日時形式で指定ができます。
  $ cj -c '2022/3/15 8:30:00 PM'
  $ cj -j 'Tue Mar 15 20:17:45 2022'

日付や時間はある程度省略可能です。省略部分には当日 0 時を基準にした値が入ります。
  $ cj -j '2022-03-15'
  $ cj -j '4/15'
  $ cj -j '12:00:00'
  $ cj -j '11:50'
help_msg
    }

# エラーメッセージを表示する関数
function print_error_to_exit() {
    cat << error_msg
引数の渡し方に異常がありました。
使い方を確認するには 'cj -h' を送信してください。
error_msg

    exit 1
    }

# UTC から現在の CST と JST を計算する関数
function utc_to_cst_and_jst() {
    local notice_msg cst_mark utc_dt cst_dt jst_dt

    # 出力用の表示を設定
    notice_msg="Display current CST and JST."
    cst_mark=" "
    jst_mark=" "

    # 計算の基準となる現在の UTC 日時を取得
    # 実行環境によるタイムゾーンの違いを考慮するため、UTC 日時を現在の CST と UTC を計算する基準としている
    utc_dt=$(date +'%F (%a) %T' -u)

    # UTC から CST を計算
    cst_dt=$(date +'%F (%a) %T' -d "${utc_dt} 6 hours ago" -u)

    # UTC から JST を計算
    jst_dt=$(date +'%F (%a) %T' -d "${utc_dt} 9 hours" -u)

    # 結果の出力
    # FIXME: 結果の出力を関数化したいが配列を標準出力で渡す記述が複雑になる
    cat \
<<result
${notice_msg}
--------------------------------
${cst_mark} CST: ${cst_dt}
${jst_mark} JST: ${jst_dt}
result
}

# 渡された引数を CST として JST を計算する関数
function cst_to_jst() {
    local notice_msg cst_mark cst_dt jst_dt

    # 出力用の表示を設定
    notice_msg="Converted CST to JST."
    cst_mark="*"
    jst_mark=" "

    # 渡された日付をフォーマットして CST として格納
    cst_dt=$(date +'%F (%a) %T' -d "${1}")

    # CST から JST を計算
    jst_dt=$(date +'%F (%a) %T' -d "${cst_dt} 15 hours")

    # 結果の出力
    cat \
<<result
${notice_msg}
--------------------------------
${cst_mark} CST: ${cst_dt}
${jst_mark} JST: ${jst_dt}
result
}


# 渡された引数を JST として CST を計算する関数
function jst_to_cst() {
    local notice_msg cst_mark cst_dt jst_dt

    # 出力用の表示を設定
    notice_msg="Converted JST to CST."
    cst_mark=" "
    jst_mark="*"

    # 渡された日付をフォーマットして JST として格納
    jst_dt=$(date +'%F (%a) %T' -d "${1}")

    # JST から CST を計算
    cst_dt=$(date +'%F (%a) %T' -d "${jst_dt} 15 hours ago")

    # 結果の出力
    cat \
<<result
${notice_msg}
--------------------------------
${cst_mark} CST: ${cst_dt}
${jst_mark} JST: ${jst_dt}
result
}


###################################
# メイン処理
###################################
main() {
    # 引数を命名
    # 未定義（引数なし）の場合は空文字を代入する
    local option datetime
    option=${1:-""}
    datetime=${2:-""}

    # ヘルプの表示判定
    if [[ "$option" = "-h" ]] || [[ "$option" = "--help" ]]; then
        print_help
    fi

    # オプション指定の分岐
    if (( $# == 0 )); then
        # 引数が無ければ現在の CST と UTC を計算して正常終了
        utc_to_cst_and_jst

    elif [[ "$option" = "-c" ]] && (( $# == 2 )); then
        # -c 引数を受け取った場合は渡された日付時刻を CST として JST を計算する
        cst_to_jst "$datetime"

    elif [[ "$option" = "-j" ]] && (( $# == 2 )); then
        # -j 引数を受け取った場合は渡された日付時刻を JST として CST を計算する
        jst_to_cst "$datetime"

    else
        # 引数指定に当てはまらなかったらエラーメッセージを表示してエラー終了
        print_error_to_exit
    fi
}

main "$@"
